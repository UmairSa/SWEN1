package at.technikum.apps.mtcg.controller;

import at.technikum.apps.mtcg.entity.User;
import at.technikum.apps.mtcg.service.UserService;
import at.technikum.server.http.HttpContentType;
import at.technikum.server.http.HttpStatus;
import at.technikum.server.http.Request;
import at.technikum.server.http.Response;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.Optional;

public class UserController extends Controller {
    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @Override
    public boolean supports(String route) {
        return route.startsWith("/users") || route.startsWith("/sessions");
    }

    @Override
    public Response handle(Request request) {
        if (request.getRoute().equals("/users") && request.getMethod().equals("POST")) {
            return registerUser(request);
        } else if (request.getRoute().equals("/sessions") && request.getMethod().equals("POST")) {
            return loginUser(request);
        }

        String routeUsername = extractUsernameFromRoute(request.getRoute());
        if (routeUsername == null || !validateToken(request, routeUsername)) {
            return unauthorizedResponse();
        }

        if (request.getRoute().startsWith("/users/")) {
            switch (request.getMethod()) {
                case "GET":
                    return getUserData(routeUsername);
                case "PUT":
                    // Implement logic for PUT method
                    // return updateUserData(request, routeUsername);
                default:
                    return badRequestResponse();
            }
        }

        return badRequestResponse();
    }

    // Existing methods (registerUser, loginUser, getUserData, validateToken, etc.)

    private Response badRequestResponse() {
        return createResponse(HttpStatus.BAD_REQUEST, HttpContentType.TEXT_PLAIN, "Bad request");
    }

    private Response unauthorizedResponse() {
        return createResponse(HttpStatus.UNAUTHORIZED, HttpContentType.TEXT_PLAIN, "Unauthorized access");
    }

    private Response createResponse(HttpStatus status, HttpContentType contentType, String body) {
        Response response = new Response();
        response.setStatus(status);
        response.setContentType(contentType);
        response.setBody(body);
        return response;
    }

    private String extractUsernameFromRoute(String route) {
        // Existing implementation
    }

    private boolean validateToken(Request request, String routeUsername) {
        // Existing implementation
    }

    // Other methods (serializeUserToJson, userNotFoundResponse, etc.)
}
