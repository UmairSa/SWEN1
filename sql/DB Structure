1. **Users Table**:
   - Stores user information.
   - `userid`: A unique identifier for each user, set as the primary key.
   - `username`: The user's chosen username, which is unique.
   - `password`: Stores the user's password.
   - `coins`: Represents the virtual currency balance of the user. Defaults to 20 as per game rules.
   - `elo`: The user's ELO score for the ranking system. Starts at 100.
   - `name`, `bio`, `image`: Optional fields for the user's profile information.

2. **Cards Table**:
   - Represents individual cards in the game.
   - `cardid`: A unique UUID for each card, set as the primary key.
   - `name`: The name of the card.
   - `damage`: The damage value of the card.
   - `elementtype`: The type of element associated with the card (e.g., fire, water).
   - `cardtype`: Defines if the card is a monster or a spell. It's restricted to these two values.
   - `ownerid`: Foreign key linking to the `userid` in the users table. Represents who owns the card.
   - `in_deck`: A boolean flag indicating if the card is currently in the user's deck.

3. **Packages Table**:
   - Manages card packages.
   - `packageid`: A unique UUID for each package.

4. **Package Contents Table**:
   - Links cards to their respective packages.
   - `packageid`: Foreign key to the packages table.
   - `cardid`: Foreign key to the cards table.
   - The primary key is a composite of `packageid` and `cardid`.

5. **Transactions Table**:
   - Records transactions where users acquire packages.
   - `transactionid`: A unique identifier for each transaction.
   - `userid`: Foreign key to the users table.
   - `packageid`: Foreign key to the packages table.

6. **Trades Table**:
   - Manages trading deals between users.
   - `tradeid`: A unique UUID for each trade.
   - `cardid`: The ID of the card being traded.
   - `requesterid`: The ID of the user who created the trade.
   - `type`: Specifies the type of card requested in the trade.
   - `minimum_damage`: Specifies the minimum damage required for a card to be eligible for the trade.
   - `status`: Indicates whether the trade is open or closed.

7. **Battles Table**:
   - Keeps track of battles between users.
   - `battleid`: A unique identifier for each battle.
   - `player1_id` and `player2_id`: User IDs of the players involved in the battle.
   - `winner_id`: The ID of the winning user.
   - `log`: A textual log describing the battle's events.

//DBDIAGRAM.IO
Table users {
  userid SERIAL [pk]
  username VARCHAR(255) [unique, not null]
  password VARCHAR(255) [not null]
  coins INT [default: 0]
  elo INT [default: 100]
  name VARCHAR(255)
  bio VARCHAR(255)
  image VARCHAR(255)
}

Table cards {
  cardid SERIAL [pk]
  name VARCHAR(255)
  damage FLOAT
  elementtype VARCHAR(50)
  cardtype VARCHAR(50) // 'monster' or 'spell'
  ownerid INT [ref: > users.userid]
}

Table packages {
  packageid SERIAL [pk]
  creatorid INT [ref: > users.userid]
  price INT
}

Table package_contents {
  packageid INT [ref: > packages.packageid]
  cardid INT [ref: > cards.cardid]
}

Table transactions {
  transactionid SERIAL [pk]
  userid INT [ref: > users.userid]
  packageid INT [ref: > packages.packageid]
  timestamp TIMESTAMP
}

Table decks {
  userid INT [ref: > users.userid]
  cardid INT [ref: > cards.cardid]
}

Table tradings {
  tradingid SERIAL [pk]
  cardid INT [ref: > cards.cardid]
  ownerid INT [ref: > users.userid]
  type VARCHAR(50) // 'monster' or 'spell'
  minimum_damage FLOAT
  is_active BOOLEAN [default: true]
}

Table battles {
  battleid SERIAL [pk]
  player1 INT [ref: > users.userid]
  player2 INT [ref: > users.userid]
  winner INT [ref: > users.userid]
  log TEXT
  timestamp TIMESTAMP
}

Table friends {
  userid INT [ref: > users.userid]
  friend_userid INT [ref: > users.userid]
}

// Optional: Extended scoreboard features
Table extended_scoreboard {
  userid INT [ref: > users.userid]
  elo INT
  whr INT
}
